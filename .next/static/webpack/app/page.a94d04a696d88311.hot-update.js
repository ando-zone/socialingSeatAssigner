"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/grouping.ts":
/*!*******************************!*\
  !*** ./src/utils/grouping.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOptimalGroups: () => (/* binding */ createOptimalGroups),\n/* harmony export */   updateMeetingHistory: () => (/* binding */ updateMeetingHistory)\n/* harmony export */ });\n// 두 참가자가 이전에 만났는지 확인\nfunction haveMet(p1, p2) {\n    var _p1_metPeople;\n    return ((_p1_metPeople = p1.metPeople) === null || _p1_metPeople === void 0 ? void 0 : _p1_metPeople.includes(p2.id)) || false;\n}\n// 그룹의 균형 점수 계산 (높을수록 좋음)\nfunction calculateGroupBalance(group) {\n    const maleCount = group.filter((p)=>p.gender === 'male').length;\n    const femaleCount = group.filter((p)=>p.gender === 'female').length;\n    const extrovertCount = group.filter((p)=>p.mbti === 'extrovert').length;\n    const introvertCount = group.filter((p)=>p.mbti === 'introvert').length;\n    // 성별 균형 점수 (우선순위 높음)\n    const genderBalance = 1 - Math.abs(maleCount - femaleCount) / group.length;\n    // MBTI 균형 점수 (우선순위 낮음)\n    const mbtiBalance = 1 - Math.abs(extrovertCount - introvertCount) / group.length;\n    // 새로운 만남 점수\n    let newMeetings = 0;\n    let totalPairs = 0;\n    for(let i = 0; i < group.length; i++){\n        for(let j = i + 1; j < group.length; j++){\n            totalPairs++;\n            if (!haveMet(group[i], group[j])) {\n                newMeetings++;\n            }\n        }\n    }\n    const newMeetingScore = totalPairs > 0 ? newMeetings / totalPairs : 1;\n    // 가중 평균 (성별 균형 70%, 새로운 만남 25%, MBTI 균형 5%)\n    return genderBalance * 0.7 + newMeetingScore * 0.25 + mbtiBalance * 0.05;\n}\n// 참가자가 이전 라운드와 다른 그룹 번호를 가져야 하는지 확인\nfunction shouldAvoidGroupNumber(participant, groupNumber) {\n    const history = participant.groupHistory || [];\n    return history.length > 0 && history[history.length - 1] === groupNumber;\n}\n// 유전 알고리즘을 사용한 그룹 배치\nfunction createOptimalGroups(participants) {\n    let groupSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4, currentRound = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n    if (participants.length < 2) {\n        throw new Error('최소 2명 이상의 참가자가 필요합니다.');\n    }\n    const numGroups = Math.ceil(participants.length / groupSize);\n    const populationSize = 100;\n    const generations = 200;\n    const mutationRate = 0.1;\n    // 개체 생성 (그룹 배치 방식)\n    function createIndividual() {\n        const individual = new Array(participants.length);\n        const groupSizes = new Array(numGroups).fill(0);\n        for(let i = 0; i < participants.length; i++){\n            let groupIndex;\n            let attempts = 0;\n            do {\n                groupIndex = Math.floor(Math.random() * numGroups);\n                attempts++;\n            }while (attempts < 10 && (groupSizes[groupIndex] >= groupSize || shouldAvoidGroupNumber(participants[i], groupIndex + 1)));\n            individual[i] = groupIndex;\n            groupSizes[groupIndex]++;\n        }\n        return individual;\n    }\n    // 적합도 계산\n    function calculateFitness(individual) {\n        const groups = Array.from({\n            length: numGroups\n        }, ()=>[]);\n        individual.forEach((groupIndex, participantIndex)=>{\n            groups[groupIndex].push(participants[participantIndex]);\n        });\n        let totalScore = 0;\n        let validGroups = 0;\n        for (const group of groups){\n            if (group.length > 0) {\n                totalScore += calculateGroupBalance(group);\n                validGroups++;\n                // 그룹 번호 회피 보너스\n                for (const participant of group){\n                    const groupNumber = groups.indexOf(group) + 1;\n                    if (!shouldAvoidGroupNumber(participant, groupNumber)) {\n                        totalScore += 0.1;\n                    }\n                }\n            }\n        }\n        return validGroups > 0 ? totalScore / validGroups : 0;\n    }\n    // 교차\n    function crossover(parent1, parent2) {\n        const child = new Array(participants.length);\n        const crossoverPoint = Math.floor(Math.random() * participants.length);\n        for(let i = 0; i < participants.length; i++){\n            child[i] = i < crossoverPoint ? parent1[i] : parent2[i];\n        }\n        return child;\n    }\n    // 돌연변이\n    function mutate(individual) {\n        const mutated = [\n            ...individual\n        ];\n        for(let i = 0; i < mutated.length; i++){\n            if (Math.random() < mutationRate) {\n                let newGroup;\n                let attempts = 0;\n                do {\n                    newGroup = Math.floor(Math.random() * numGroups);\n                    attempts++;\n                }while (attempts < 5 && shouldAvoidGroupNumber(participants[i], newGroup + 1));\n                mutated[i] = newGroup;\n            }\n        }\n        return mutated;\n    }\n    // 유전 알고리즘 실행\n    let population = Array.from({\n        length: populationSize\n    }, ()=>createIndividual());\n    for(let generation = 0; generation < generations; generation++){\n        // 적합도 계산 및 정렬\n        const fitnessScores = population.map(calculateFitness);\n        const sortedIndices = fitnessScores.map((fitness, index)=>({\n                fitness,\n                index\n            })).sort((a, b)=>b.fitness - a.fitness);\n        // 엘리트 선택 (상위 20%)\n        const eliteSize = Math.floor(populationSize * 0.2);\n        const newPopulation = sortedIndices.slice(0, eliteSize).map((item)=>population[item.index]);\n        // 나머지는 교차와 돌연변이로 생성\n        while(newPopulation.length < populationSize){\n            const parent1Index = Math.floor(Math.random() * eliteSize);\n            const parent2Index = Math.floor(Math.random() * eliteSize);\n            const parent1 = newPopulation[parent1Index];\n            const parent2 = newPopulation[parent2Index];\n            let child = crossover(parent1, parent2);\n            child = mutate(child);\n            newPopulation.push(child);\n        }\n        population = newPopulation;\n    }\n    // 최적 해 선택\n    const fitnessScores = population.map(calculateFitness);\n    const bestIndex = fitnessScores.indexOf(Math.max(...fitnessScores));\n    const bestSolution = population[bestIndex];\n    // 결과 구성\n    const finalGroups = [];\n    const groupArrays = Array.from({\n        length: numGroups\n    }, ()=>[]);\n    bestSolution.forEach((groupIndex, participantIndex)=>{\n        groupArrays[groupIndex].push(participants[participantIndex]);\n    });\n    let newMeetingsTotal = 0;\n    let totalGenderBalance = 0;\n    let totalMbtiBalance = 0;\n    groupArrays.forEach((groupMembers, index)=>{\n        if (groupMembers.length > 0) {\n            const maleCount = groupMembers.filter((p)=>p.gender === 'male').length;\n            const femaleCount = groupMembers.filter((p)=>p.gender === 'female').length;\n            const extrovertCount = groupMembers.filter((p)=>p.mbti === 'extrovert').length;\n            const introvertCount = groupMembers.filter((p)=>p.mbti === 'introvert').length;\n            // 새로운 만남 계산\n            for(let i = 0; i < groupMembers.length; i++){\n                for(let j = i + 1; j < groupMembers.length; j++){\n                    if (!haveMet(groupMembers[i], groupMembers[j])) {\n                        newMeetingsTotal++;\n                    }\n                }\n            }\n            totalGenderBalance += 1 - Math.abs(maleCount - femaleCount) / groupMembers.length;\n            totalMbtiBalance += 1 - Math.abs(extrovertCount - introvertCount) / groupMembers.length;\n            finalGroups.push({\n                id: index + 1,\n                members: groupMembers,\n                maleCount,\n                femaleCount,\n                extrovertCount,\n                introvertCount\n            });\n        }\n    });\n    return {\n        groups: finalGroups,\n        round: currentRound,\n        summary: {\n            totalGroups: finalGroups.length,\n            avgGroupSize: participants.length / finalGroups.length,\n            genderBalanceScore: Math.round(totalGenderBalance / finalGroups.length * 100),\n            mbtiBalanceScore: Math.round(totalMbtiBalance / finalGroups.length * 100),\n            newMeetingsCount: newMeetingsTotal\n        }\n    };\n}\n// 만남 히스토리 업데이트\nfunction updateMeetingHistory(participants, groups, round) {\n    const updatedParticipants = participants.map((p)=>({\n            ...p,\n            metPeople: [\n                ...p.metPeople || []\n            ],\n            groupHistory: [\n                ...p.groupHistory || []\n            ]\n        }));\n    // 각 그룹 내 참가자들의 만남 기록 업데이트\n    groups.forEach((group)=>{\n        // 그룹 번호 히스토리 업데이트\n        group.members.forEach((member)=>{\n            const participant = updatedParticipants.find((p)=>p.id === member.id);\n            if (participant) {\n                participant.groupHistory.push(group.id);\n            }\n        });\n        // 서로 만난 기록 업데이트\n        for(let i = 0; i < group.members.length; i++){\n            for(let j = i + 1; j < group.members.length; j++){\n                const p1 = updatedParticipants.find((p)=>p.id === group.members[i].id);\n                const p2 = updatedParticipants.find((p)=>p.id === group.members[j].id);\n                if (p1 && p2) {\n                    if (!p1.metPeople.includes(p2.id)) {\n                        p1.metPeople.push(p2.id);\n                    }\n                    if (!p2.metPeople.includes(p1.id)) {\n                        p2.metPeople.push(p1.id);\n                    }\n                }\n            }\n        }\n    });\n    return updatedParticipants;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/grouping.ts\n"));

/***/ })

});