'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createOptimalGroups, updateMeetingHistory, migrateParticipantData, type Participant, type GroupingResult, type GenderConstraint } from '@/utils/grouping'
import { createSnapshot, exportToJSON, importFromJSON, getSnapshots, restoreSnapshot, formatDateTime } from '@/utils/backup'

export default function Home() {
  const router = useRouter()
  const [participants, setParticipants] = useState<Participant[]>([])
  const [name, setName] = useState('')
  const [gender, setGender] = useState<'male' | 'female'>('male')
  const [mbti, setMbti] = useState<'extrovert' | 'introvert'>('extrovert')
  const [currentRound, setCurrentRound] = useState(1)
  const [groupSize, setGroupSize] = useState(4)
  const [isLoading, setIsLoading] = useState(false)
  const [groupingMode, setGroupingMode] = useState<'auto' | 'manual'>('manual')
  const [numGroups, setNumGroups] = useState(6)
  const [customGroupSizes, setCustomGroupSizes] = useState<number[]>([12, 12, 12, 12, 12, 12])
  const [customGroupGenders, setCustomGroupGenders] = useState<{maleCount: number, femaleCount: number}[]>([
    {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, 
    {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}
  ])
  const [enableGenderRatio, setEnableGenderRatio] = useState(false)
  const [groupSettingsLoaded, setGroupSettingsLoaded] = useState(false)
  const [bulkText, setBulkText] = useState('')
  const [showBulkInput, setShowBulkInput] = useState(false)
  const [showBackupSection, setShowBackupSection] = useState(false)
  const [snapshots, setSnapshots] = useState<any[]>([])
  const [isInitialLoad, setIsInitialLoad] = useState(true)
  const [hasExistingResult, setHasExistingResult] = useState(false)
  const [isClient, setIsClient] = useState(false)
  const [currentMeeting, setCurrentMeeting] = useState<any>(null)

  const addParticipant = async () => {
    if (name.trim()) {
      const newParticipant: Participant = {
        id: Date.now().toString(),
        name: name.trim(),
        gender,
        mbti,
        meetingsByRound: {},
        allMetPeople: [],
        groupHistory: []
      }
      const updatedParticipants = [...participants, newParticipant]
      
      // Ï¶âÏãú SupabaseÏóê Ï†ÄÏû• (Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± Ï†ÑÏóê)
      const { saveParticipants } = await import('@/utils/database')
      await saveParticipants(updatedParticipants)
      
      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setParticipants(updatedParticipants)
      setName('')
      
      // Ï∞∏Í∞ÄÏûê Ï∂îÍ∞Ä Ïãú Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± (Supabase Ï†ÄÏû• ÌõÑ)
      try {
        await createSnapshot('participant_add', `Ï∞∏Í∞ÄÏûê Ï∂îÍ∞Ä: ${newParticipant.name}`)
        console.log(`‚úÖ Ï∞∏Í∞ÄÏûê Ï∂îÍ∞Ä Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± ÏôÑÎ£å: ${newParticipant.name}`)
        
        // DB Ï†ÄÏû• ÏãúÎèÑ
        try {
          const { saveParticipants } = await import('@/utils/database')
          await saveParticipants(updatedParticipants)
          console.log('‚úÖ Ï∞∏Í∞ÄÏûê DB Ï†ÄÏû• ÏÑ±Í≥µ')
        } catch (error) {
          console.warn('‚ö†Ô∏è Ï∞∏Í∞ÄÏûê DB Ï†ÄÏû• Ïã§Ìå® (Î°úÏª¨ÏùÄ Ï†ïÏÉÅ):', error)
        }
      } catch (error) {
        console.error('‚ùå Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± Ïã§Ìå®:', error)
      }
    }
  }

  const removeParticipant = async (id: string) => {
    const participantToRemove = participants.find(p => p.id === id)
    const updatedParticipants = participants.filter(p => p.id !== id)
    
    // Ï¶âÏãú SupabaseÏóê Ï†ÄÏû• (Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± Ï†ÑÏóê)
    const { saveParticipants, getExitedParticipants, saveExitedParticipants } = await import('@/utils/database')
    await saveParticipants(updatedParticipants)
    
    if (participantToRemove) {
      // Ïù¥ÌÉàÌïú ÏÇ¨Îûå Ï†ïÎ≥¥Î•º SupabaseÏóê Ï†ÄÏû•
      const exitedParticipants = await getExitedParticipants()
      exitedParticipants[id] = {
        name: participantToRemove.name,
        gender: participantToRemove.gender
      }
      await saveExitedParticipants(exitedParticipants)
      
      // Ï∞∏Í∞ÄÏûê Ï†úÍ±∞ Ïãú Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± (Supabase Ï†ÄÏû• ÌõÑ)
      try {
        await createSnapshot('participant_remove', `Ï∞∏Í∞ÄÏûê Ï†úÍ±∞: ${participantToRemove.name}`)
        console.log(`‚úÖ Ï∞∏Í∞ÄÏûê Ï†úÍ±∞ Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± ÏôÑÎ£å: ${participantToRemove.name}`)
        
        // DB Ï†ÄÏû• ÏãúÎèÑ
        try {
          const { saveParticipants, saveExitedParticipants } = await import('@/utils/database')
          await Promise.all([
            saveParticipants(updatedParticipants),
            saveExitedParticipants(exitedParticipants)
          ])
          console.log('‚úÖ Ï∞∏Í∞ÄÏûê Ï†úÍ±∞ DB Ï†ÄÏû• ÏÑ±Í≥µ')
        } catch (error) {
          console.warn('‚ö†Ô∏è Ï∞∏Í∞ÄÏûê Ï†úÍ±∞ DB Ï†ÄÏû• Ïã§Ìå® (Î°úÏª¨ÏùÄ Ï†ïÏÉÅ):', error)
        }
      } catch (error) {
        console.error('‚ùå Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± Ïã§Ìå®:', error)
      }
    }
    
    // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setParticipants(updatedParticipants)
  }

  // Í∑∏Î£π Ïàò Î≥ÄÍ≤Ω Ïãú customGroupSizes Î∞è customGroupGenders Î∞∞Ïó¥ ÌÅ¨Í∏∞ Ï°∞Ï†ï
  const handleNumGroupsChange = (newNumGroups: number) => {
    setNumGroups(newNumGroups)
    const newSizes = [...customGroupSizes]
    const newGenders = [...customGroupGenders]
    
    if (newNumGroups > customGroupSizes.length) {
      // Í∑∏Î£π ÏàòÍ∞Ä ÎäòÏñ¥ÎÇòÎ©¥ ÎßàÏßÄÎßâ Í∑∏Î£πÏùò ÏÑ§Ï†ïÏùÑ Î≥µÏÇ¨ÌïòÏó¨ Ï∂îÍ∞Ä
      const lastSize = newSizes.length > 0 ? newSizes[newSizes.length - 1] : 4
      const lastGender = newGenders.length > 0 ? newGenders[newGenders.length - 1] : {maleCount: 2, femaleCount: 2}
      
      while (newSizes.length < newNumGroups) {
        newSizes.push(lastSize)
        newGenders.push({...lastGender}) // ÍπäÏùÄ Î≥µÏÇ¨Î°ú Ï∂îÍ∞Ä
      }
    } else if (newNumGroups < customGroupSizes.length) {
      // Í∑∏Î£π ÏàòÍ∞Ä Ï§ÑÏñ¥Îì§Î©¥ Îí§ÏóêÏÑúÎ∂ÄÌÑ∞ Ï†úÍ±∞
      newSizes.splice(newNumGroups)
      newGenders.splice(newNumGroups)
    }
    
    setCustomGroupSizes(newSizes)
    setCustomGroupGenders(newGenders)
  }

  // Í∞úÎ≥Ñ Í∑∏Î£π ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω
  const handleGroupSizeChange = (groupIndex: number, newSize: number) => {
    const newSizes = [...customGroupSizes]
    newSizes[groupIndex] = newSize
    console.log(`üéØ Í∑∏Î£π ${groupIndex + 1} ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω: ${customGroupSizes[groupIndex]} ‚Üí ${newSize}`)
    console.log('üìä ÏÉàÎ°úÏö¥ Í∑∏Î£π ÌÅ¨Í∏∞ Î∞∞Ïó¥:', newSizes)
    setCustomGroupSizes(newSizes)
    
    // ÏÑ±ÎπÑÍ∞Ä ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞, Í∑∏Î£π ÌÅ¨Í∏∞Ïóê ÎßûÏ∂∞ ÏÑ±ÎπÑÎèÑ Ï°∞Ï†ï
    if (enableGenderRatio) {
      const newGenders = [...customGroupGenders]
      const currentGender = newGenders[groupIndex]
      const currentTotal = currentGender.maleCount + currentGender.femaleCount
      
      if (newSize !== currentTotal) {
        // Í∏∞Ï°¥ ÎπÑÏú®ÏùÑ Ïú†ÏßÄÌïòÎ©¥ÏÑú ÌÅ¨Í∏∞ Ï°∞Ï†ï
        const maleRatio = currentGender.maleCount / Math.max(currentTotal, 1)
        const newMaleCount = Math.round(newSize * maleRatio)
        const newFemaleCount = newSize - newMaleCount
        
        newGenders[groupIndex] = {
          maleCount: Math.max(0, newMaleCount),
          femaleCount: Math.max(0, newFemaleCount)
        }
        setCustomGroupGenders(newGenders)
      }
    }
  }
  
  // Í∞úÎ≥Ñ Í∑∏Î£πÏùò ÎÇ®ÏÑ± Ïàò Î≥ÄÍ≤Ω
  const handleGroupMaleCountChange = (groupIndex: number, newMaleCount: number) => {
    const newGenders = [...customGroupGenders]
    const groupSize = customGroupSizes[groupIndex]
    const maxMale = Math.max(0, Math.min(groupSize, newMaleCount))
    const newFemaleCount = groupSize - maxMale
    
    newGenders[groupIndex] = {
      maleCount: maxMale,
      femaleCount: Math.max(0, newFemaleCount)
    }
    setCustomGroupGenders(newGenders)
  }
  
  // Í∞úÎ≥Ñ Í∑∏Î£πÏùò Ïó¨ÏÑ± Ïàò Î≥ÄÍ≤Ω
  const handleGroupFemaleCountChange = (groupIndex: number, newFemaleCount: number) => {
    const newGenders = [...customGroupGenders]
    const groupSize = customGroupSizes[groupIndex]
    const maxFemale = Math.max(0, Math.min(groupSize, newFemaleCount))
    const newMaleCount = groupSize - maxFemale
    
    newGenders[groupIndex] = {
      maleCount: Math.max(0, newMaleCount),
      femaleCount: maxFemale
    }
    setCustomGroupGenders(newGenders)
  }

  // Ï¥ù ÏòàÏÉÅ Ïù∏Ïõê Í≥ÑÏÇ∞
  const getTotalCustomSize = () => customGroupSizes.reduce((sum, size) => sum + size, 0)

  const handleGrouping = async () => {
    if (participants.length < 2) {
      alert('ÏµúÏÜå 2Î™Ö Ïù¥ÏÉÅÏùò Ï∞∏Í∞ÄÏûêÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.')
      return
    }

    // ÏàòÎèô Î™®ÎìúÏóêÏÑú Ï¥ù Ïù∏Ïõê Ï≤¥ÌÅ¨
    if (groupingMode === 'manual') {
      const totalCustomSize = customGroupSizes.reduce((sum, size) => sum + size, 0)
      if (totalCustomSize < participants.length) {
        alert(`ÏÑ§Ï†ïÎêú Í∑∏Î£π ÌÅ¨Í∏∞Ïùò Ï¥ùÌï©(${totalCustomSize}Î™Ö)Ïù¥ Ï∞∏Í∞ÄÏûê Ïàò(${participants.length}Î™Ö)Î≥¥Îã§ Ï†ÅÏäµÎãàÎã§.`)
        return
      }
    }

    setIsLoading(true)
    
    try {
      // ÎèôÏ†Å importÎ°ú database Ìï®ÏàòÎì§ Í∞ÄÏ†∏Ïò§Í∏∞
      const { 
        getCurrentMeetingId, 
        updateMeetingRound, 
        saveParticipants, 
        saveGroupingResult, 
        saveGroupSettings 
      } = await import('@/utils/database')
      
      // Í∑∏Î£π Î∞∞Ïπò Ï†Ñ Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±
      await createSnapshot('round_start', `${currentRound}ÎùºÏö¥Îìú ÏãúÏûë Ï†Ñ`)
      
      const groupSizeParam = groupingMode === 'auto' ? groupSize : customGroupSizes
      
      // ÏÑ±ÎπÑ Ï†úÏïΩ Ï°∞Í±¥ Ï§ÄÎπÑ
      let genderConstraints: GenderConstraint[] | undefined = undefined
      if (groupingMode === 'manual' && enableGenderRatio) {
        genderConstraints = customGroupGenders.map(gender => ({
          maleCount: gender.maleCount,
          femaleCount: gender.femaleCount
        }))
        console.log('üéØ ÏÑ±ÎπÑ Ï†úÏïΩ Ï°∞Í±¥ Ï†ÅÏö©:', genderConstraints)
      }
      
      const result = createOptimalGroups(participants, groupSizeParam, currentRound, genderConstraints)
      const updatedParticipants = updateMeetingHistory(participants, result.groups, currentRound)
      
      const nextRound = currentRound + 1
      
      // Supabase Ï†ÄÏû•
      await saveGroupingResult(result)
      await saveParticipants(updatedParticipants)
      
      const meetingId = getCurrentMeetingId()
      if (meetingId) {
        await updateMeetingRound(meetingId, nextRound)
      }
      
      // Í∑∏Î£π ÏÑ§Ï†ï Ï†ÄÏû•
      const groupSettings = {
        groupingMode,
        groupSize,
        numGroups,
        customGroupSizes,
        customGroupGenders,
        enableGenderRatio
      }
      await saveGroupSettings(groupSettings)
      
      // Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±
      try {
        await createSnapshot('group_generation', `${nextRound-1}ÎùºÏö¥Îìú Í∑∏Î£π ÏÉùÏÑ±`)
        console.log('‚úÖ Í∑∏Î£π ÏÉùÏÑ± Ïä§ÎÉÖÏÉ∑ Ï†ÄÏû• ÏôÑÎ£å')
      } catch (snapshotError) {
        console.warn('‚ö†Ô∏è Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± Ïã§Ìå®:', snapshotError)
      }
      
      // Í≤∞Í≥ºÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏùåÏùÑ ÌëúÏãú
      setHasExistingResult(true)
      
      // Í∑∏Î£π Î∞∞Ïπò ÏôÑÎ£å ÌõÑ Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±
      setTimeout(async () => {
        await createSnapshot('round_complete', `${currentRound}ÎùºÏö¥Îìú Î∞∞Ïπò ÏôÑÎ£å`)
      }, 100)
      
      router.push('/result')
    } catch (error: any) {
      alert(error.message || 'Í∑∏Î£π Î∞∞Ïπò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      console.error(error)
    } finally {
      setIsLoading(false)
    }
  }

  // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
  useEffect(() => {
    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑúÎßå Ïã§Ìñâ
    if (typeof window === 'undefined') return
    
    // URLÏóêÏÑú Î™®ÏûÑ ID ÌôïÏù∏
    const checkUrlMeetingId = async () => {
      try {
        const urlParams = new URLSearchParams(window.location.search)
        const urlMeetingId = urlParams.get('meeting')
        
        if (urlMeetingId) {
          console.log('URLÏóêÏÑú Î™®ÏûÑ ID Í∞êÏßÄ:', urlMeetingId)
          const { setCurrentMeetingId, getUserMeetings } = await import('@/utils/database')
          const { createSupabaseClient } = await import('@/lib/supabase')
          
          const supabase = createSupabaseClient()
          if (supabase) {
            // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ÌôïÏù∏
            const { data: { user } } = await supabase.auth.getUser()
            if (user) {
              // Ìï¥Îãπ Î™®ÏûÑÏù¥ ÏÇ¨Ïö©ÏûêÏùò Î™®ÏûÑÏù∏ÏßÄ ÌôïÏù∏
              const userMeetings = await getUserMeetings(user.id)
              const targetMeeting = userMeetings.find(m => m.id === urlMeetingId)
              
              if (targetMeeting) {
                setCurrentMeetingId(urlMeetingId)
                console.log('‚úÖ URL Î™®ÏûÑÏúºÎ°ú Ï†ÑÌôò:', targetMeeting.name)
                // URL ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞
                window.history.replaceState({}, '', window.location.pathname)
              } else {
                console.warn('‚ö†Ô∏è Ìï¥Îãπ Î™®ÏûÑÏóê Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§:', urlMeetingId)
              }
            }
          }
        }
      } catch (error) {
        console.warn('URL Î™®ÏûÑ ID Ï≤òÎ¶¨ Ïã§Ìå®:', error)
      }
    }
    
    checkUrlMeetingId()
    
    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏûÑÏùÑ ÌëúÏãú
    setIsClient(true)
    
    // SupabaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎî©
    const loadData = async () => {
      try {
        const { 
          getParticipants, 
          getGroupingResult, 
          getGroupSettings,
          getCurrentMeetingId,
          getCurrentMeeting
        } = await import('@/utils/database')
        
        const meetingId = getCurrentMeetingId()
        if (!meetingId) {
          console.log('ÌôúÏÑ± Î™®ÏûÑÏù¥ ÏóÜÏäµÎãàÎã§.')
          return
        }
        
        // ÌòÑÏû¨ Î™®ÏûÑ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const meeting = await getCurrentMeeting()
        setCurrentMeeting(meeting)
        
        console.log('üì• SupabaseÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...')
        
        const [participants, groupingResult, groupSettings] = await Promise.all([
          getParticipants(),
          getGroupingResult(),
          getGroupSettings()
        ])
        
        // Í∏∞Ï°¥ Í≤∞Í≥ºÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        setHasExistingResult(!!groupingResult)
        
        // Ï∞∏Í∞ÄÏûê Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
        if (participants.length > 0) {
          // ÌòÑÏû¨ ÎùºÏö¥Îìú Ï∂îÏ∂ú
          const currentRound = groupingResult?.round ? groupingResult.round + 1 : 1
          
          // Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï†ÅÏö©
          const migratedParticipants = migrateParticipantData(participants, currentRound)
          setParticipants(migratedParticipants)
          setCurrentRound(currentRound)
          
          console.log('‚úÖ Ï∞∏Í∞ÄÏûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú:', migratedParticipants.length + 'Î™Ö')
        }
        
        // Í∑∏Î£π ÏÑ§Ï†ï Î≥µÏõê - Supabase Ïö∞ÏÑ†, localStorage Î∞±ÏóÖ
        if (groupSettings) {
          console.log('Ï†ÄÏû•Îêú Í∑∏Î£π ÏÑ§Ï†ï Î≥µÏõê:', groupSettings)
          setGroupingMode(groupSettings.groupingMode || 'manual')
          setGroupSize(groupSettings.groupSize || 4)
          setNumGroups(groupSettings.numGroups || 6)
          setCustomGroupSizes(groupSettings.customGroupSizes || [12, 12, 12, 12, 12, 12])
          
          // ÏÑ±ÎπÑ ÏÑ§Ï†ïÏù¥ SupabaseÏóê ÏóÜÏúºÎ©¥ localStorageÏóêÏÑú Î≥µÏõê ÏãúÎèÑ
          if (groupSettings.customGroupGenders) {
            setCustomGroupGenders(groupSettings.customGroupGenders)
          } else {
            const localGenders = localStorage.getItem('seatAssigner_customGroupGenders')
            if (localGenders) {
              try {
                setCustomGroupGenders(JSON.parse(localGenders))
              } catch (e) {
                setCustomGroupGenders([
                  {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, 
                  {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}
                ])
              }
            } else {
              setCustomGroupGenders([
                {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, 
                {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}
              ])
            }
          }
          
          // Î∞∞Ïó¥ Í∏∏Ïù¥ ÎèôÍ∏∞Ìôî ÌôïÏù∏
          setTimeout(() => {
            setCustomGroupSizes(prevSizes => {
              setCustomGroupGenders(prevGenders => {
                const targetLength = prevSizes.length;
                const newGenders = [...prevGenders];
                
                // genders Î∞∞Ïó¥Ïù¥ sizesÎ≥¥Îã§ ÏßßÏúºÎ©¥ Í∏∞Î≥∏Í∞íÏúºÎ°ú Ï±ÑÏõÄ
                while (newGenders.length < targetLength) {
                  newGenders.push({maleCount: 7, femaleCount: 5});
                }
                
                // genders Î∞∞Ïó¥Ïù¥ sizesÎ≥¥Îã§ Í∏∏Î©¥ ÏûêÎ¶Ñ
                if (newGenders.length > targetLength) {
                  newGenders.splice(targetLength);
                }
                
                return newGenders;
              });
              return prevSizes;
            });
          }, 0);
          
          if (groupSettings.enableGenderRatio !== undefined) {
            setEnableGenderRatio(groupSettings.enableGenderRatio)
          } else {
            const localEnabled = localStorage.getItem('seatAssigner_enableGenderRatio')
            if (localEnabled) {
              setEnableGenderRatio(localEnabled === 'true')
            } else {
              setEnableGenderRatio(false)
            }
          }
        } else {
          // Ï†ÄÏû•Îêú ÏÑ§Ï†ïÏù¥ ÏóÜÏúºÎ©¥ localStorage Ï≤¥ÌÅ¨ ÌõÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú Ï¥àÍ∏∞Ìôî
          console.log('Ï†ÄÏû•Îêú Í∑∏Î£π ÏÑ§Ï†ïÏù¥ ÏóÜÏñ¥ localStorage ÌôïÏù∏ ÌõÑ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©')
          setGroupingMode('manual')
          setGroupSize(4)
          setNumGroups(6)
          setCustomGroupSizes([12, 12, 12, 12, 12, 12])
          
          // localStorageÏóêÏÑú ÏÑ±ÎπÑ ÏÑ§Ï†ï Î≥µÏõê ÏãúÎèÑ
          const localGenders = localStorage.getItem('seatAssigner_customGroupGenders')
          const localEnabled = localStorage.getItem('seatAssigner_enableGenderRatio')
          
          if (localGenders) {
            try {
              setCustomGroupGenders(JSON.parse(localGenders))
              console.log('localStorageÏóêÏÑú ÏÑ±ÎπÑ ÏÑ§Ï†ï Î≥µÏõêÎê®')
            } catch (e) {
              setCustomGroupGenders([
                {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, 
                {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}
              ])
            }
          } else {
            setCustomGroupGenders([
              {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, 
              {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}, {maleCount: 7, femaleCount: 5}
            ])
          }
          
          if (localEnabled) {
            setEnableGenderRatio(localEnabled === 'true')
            console.log('localStorageÏóêÏÑú ÏÑ±ÎπÑ Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉÅÌÉú Î≥µÏõêÎê®:', localEnabled === 'true')
          } else {
            setEnableGenderRatio(false)
          }
        }
        setGroupSettingsLoaded(true)
        
        console.log('üì¶ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å')
        
      } catch (error) {
        console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë Ïò§Î•ò:', error)
      }
    }
    
    loadData()
    
    // Ï¥àÍ∏∞ Î°úÎìú ÏôÑÎ£å ÌëúÏãú
    setIsInitialLoad(false)
  }, [])

  // Í∑∏Î£π ÏÑ§Ï†ï Î≥ÄÍ≤Ω Ïãú SupabaseÏóê Ï†ÄÏû• (Ï¥àÍ∏∞ Î°úÎìú Î∞è ÏÑ§Ï†ï Î°úÎìú ÏôÑÎ£å ÌõÑÏóêÎßå)
  useEffect(() => {
    if (!isInitialLoad && groupSettingsLoaded) {
      const saveGroupSettings = async () => {
        try {
          const { saveGroupSettings: saveSettings } = await import('@/utils/database')
          const groupSettings = {
            groupingMode,
            groupSize,
            numGroups,
            customGroupSizes,
            customGroupGenders,
            enableGenderRatio
          }
          await saveSettings(groupSettings)
          
          // localStorageÏóêÎèÑ Î∞±ÏóÖ Ï†ÄÏû• (ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï†ÑÍπåÏßÄ ÏûÑÏãú ÏÇ¨Ïö©)
          localStorage.setItem('seatAssigner_customGroupGenders', JSON.stringify(customGroupGenders))
          localStorage.setItem('seatAssigner_enableGenderRatio', enableGenderRatio.toString())
          
          console.log('Í∑∏Î£π ÏÑ§Ï†ï Ï†ÄÏû•Îê® (Supabase + localStorage):', groupSettings)
        } catch (error) {
          console.error('Í∑∏Î£π ÏÑ§Ï†ï Ï†ÄÏû• Ï§ë Ïò§Î•ò:', error)
          
          // Supabase Ï†ÄÏû• Ïã§Ìå® Ïãú localStorageÎùºÎèÑ Ï†ÄÏû•
          try {
            localStorage.setItem('seatAssigner_customGroupGenders', JSON.stringify(customGroupGenders))
            localStorage.setItem('seatAssigner_enableGenderRatio', enableGenderRatio.toString())
            console.log('localStorageÏóê ÏÑ±ÎπÑ ÏÑ§Ï†ï Î∞±ÏóÖ Ï†ÄÏû• ÏôÑÎ£å')
          } catch (localError) {
            console.error('localStorage Î∞±ÏóÖ Ï†ÄÏû•ÎèÑ Ïã§Ìå®:', localError)
          }
        }
      }
      saveGroupSettings()
    }
  }, [groupingMode, groupSize, numGroups, customGroupSizes, customGroupGenders, enableGenderRatio, isInitialLoad, groupSettingsLoaded])

  // ÌòÑÏû¨ ÎùºÏö¥Îìú Ïû¨Î∞∞Ïπò (ÎùºÏö¥Îìú Î≤àÌò∏Îäî Ïú†ÏßÄÌïòÍ≥† Îã§Ïãú Î∞∞Ïπò)
  const regroupCurrentRound = async () => {
    if (participants.length < 2) {
      alert('Ï∞∏Í∞ÄÏûêÍ∞Ä ÏµúÏÜå 2Î™Ö Ïù¥ÏÉÅ ÌïÑÏöîÌï©ÎãàÎã§.')
      return
    }

    const confirmMessage = `ÌòÑÏû¨ ${currentRound-1}ÎùºÏö¥ÎìúÎ•º Îã§Ïãú Î∞∞ÏπòÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n‚ö†Ô∏è Í∏∞Ï°¥ Î∞∞Ïπò Í≤∞Í≥ºÍ∞Ä ÏÉàÎ°úÏö¥ Î∞∞ÏπòÎ°ú ÍµêÏ≤¥Îê©ÎãàÎã§.`
    if (!confirm(confirmMessage)) {
      return
    }

    setIsLoading(true)
    
    try {
      const { saveGroupingResult, saveParticipants } = await import('@/utils/database')
      
      // Ïû¨Î∞∞Ïπò Ï†Ñ Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±
      await createSnapshot('regroup_start', `${currentRound-1}ÎùºÏö¥Îìú Ïû¨Î∞∞Ïπò ÏãúÏûë`)
      
      const groupSizeParam = groupingMode === 'auto' ? groupSize : customGroupSizes
      const reGroupRound = currentRound - 1 // ÌòÑÏû¨ ÎùºÏö¥ÎìúÎ•º Îã§Ïãú Î∞∞Ïπò
      
      // ÏÑ±ÎπÑ Ï†úÏïΩ Ï°∞Í±¥ Ï§ÄÎπÑ
      let genderConstraints: GenderConstraint[] | undefined = undefined
      if (groupingMode === 'manual' && enableGenderRatio) {
        genderConstraints = customGroupGenders.map(gender => ({
          maleCount: gender.maleCount,
          femaleCount: gender.femaleCount
        }))
        console.log('üéØ Ïû¨Î∞∞Ïπò Ïãú ÏÑ±ÎπÑ Ï†úÏïΩ Ï°∞Í±¥ Ï†ÅÏö©:', genderConstraints)
      }
      
      console.log(`üîÑ ${reGroupRound}ÎùºÏö¥Îìú Ïû¨Î∞∞Ïπò ÏãúÏûë - Í∏∞Ï°¥ ÌûàÏä§ÌÜ†Î¶¨ Ï†ïÎ¶¨ Ï§ë...`)
      
      // Ï∞∏Í∞ÄÏûê ÌûàÏä§ÌÜ†Î¶¨ÏóêÏÑú Ìï¥Îãπ ÎùºÏö¥Îìú Ï†ïÎ≥¥ Ï†úÍ±∞ (Ïû¨Î∞∞ÏπòÎ•º ÏúÑÌï¥)
      const participantsForRegroup = participants.map(p => {
        const newMeetingsByRound = { ...p.meetingsByRound }
        if (newMeetingsByRound[reGroupRound]) {
          delete newMeetingsByRound[reGroupRound]
        }
        
        // allMetPeopleÏùÑ ÎÇòÎ®∏ÏßÄ ÎùºÏö¥ÎìúÎì§Î°úÎ∂ÄÌÑ∞ Îã§Ïãú Í≥ÑÏÇ∞
        const allMet = new Set<string>()
        Object.entries(newMeetingsByRound).forEach(([round, meetIds]) => {
          if (parseInt(round) !== reGroupRound) { // Ïû¨Î∞∞ÏπòÌï† ÎùºÏö¥Îìú Ï†úÏô∏
            meetIds.forEach(metId => allMet.add(metId))
          }
        })
        const newAllMetPeople = Array.from(allMet)
        
        // groupHistoryÏóêÏÑú Ìï¥Îãπ ÎùºÏö¥ÎìúÏùò Í∑∏Î£π Ï†ïÎ≥¥ÎèÑ Ï†úÍ±∞
        let newGroupHistory = [...p.groupHistory]
        if (newGroupHistory.length >= reGroupRound) {
          // Ìï¥Îãπ ÎùºÏö¥ÎìúÏùò Í∑∏Î£π Ï†ïÎ≥¥ Ï†úÍ±∞ (Î∞∞Ïó¥ Ïù∏Îç±Ïä§Îäî 0Î∂ÄÌÑ∞ ÏãúÏûëÌïòÎØÄÎ°ú round-1)
          newGroupHistory = newGroupHistory.slice(0, reGroupRound - 1)
        }
        
        return {
          ...p,
          meetingsByRound: newMeetingsByRound,
          allMetPeople: newAllMetPeople,
          groupHistory: newGroupHistory
        }
      })
      
      // ÏÉàÎ°úÏö¥ Í∑∏Î£π Î∞∞Ïπò
      const result = createOptimalGroups(participantsForRegroup, groupSizeParam, reGroupRound, genderConstraints)
      const updatedParticipants = updateMeetingHistory(participantsForRegroup, result.groups, reGroupRound)
      
      console.log(`‚úÖ ${reGroupRound}ÎùºÏö¥Îìú Ïû¨Î∞∞Ïπò ÏôÑÎ£å - ÏÉàÎ°úÏö¥ ÌûàÏä§ÌÜ†Î¶¨ Ï†ÅÏö©Îê®`)
      
      // Supabase Ï†ÄÏû•
      await saveGroupingResult(result)
      await saveParticipants(updatedParticipants)
      
      // Ïû¨Î∞∞Ïπò ÏôÑÎ£å Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±
      await createSnapshot('regroup_completed', `${reGroupRound}ÎùºÏö¥Îìú Ïû¨Î∞∞Ïπò ÏôÑÎ£å`)
      
      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setParticipants(updatedParticipants)
      
      // Í≤∞Í≥º ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      router.push('/result')
    } catch (error) {
      alert('Ïû¨Î∞∞Ïπò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + (error as Error).message)
    } finally {
      setIsLoading(false)
    }
  }

  const processBulkInput = async () => {
    if (!bulkText.trim()) return

    const lines = bulkText.trim().split('\n')
    const newParticipants: Participant[] = []
    
    lines.forEach((line, index) => {
      const trimmedLine = line.trim()
      if (!trimmedLine) return

      // Îã§ÏñëÌïú ÌòïÏãù ÏßÄÏõê: "Ïù¥Î¶Ñ,ÏÑ±Î≥Ñ,MBTI" ÎòêÎäî "Ïù¥Î¶Ñ ÏÑ±Î≥Ñ MBTI" ÎòêÎäî "Ïù¥Î¶Ñ"Îßå
      let name = '', gender: 'male' | 'female' = 'male', mbti: 'extrovert' | 'introvert' = 'extrovert'
      
      if (trimmedLine.includes(',')) {
        // CSV ÌòïÏãù: "Ïù¥Î¶Ñ,ÏÑ±Î≥Ñ,MBTI"
        const parts = trimmedLine.split(',').map(p => p.trim())
        name = parts[0] || ''
        
        if (parts[1]) {
          const genderStr = parts[1].toLowerCase()
          if (genderStr.includes('Ïó¨') || genderStr.includes('female') || genderStr.includes('f')) {
            gender = 'female'
          }
        }
        
        if (parts[2]) {
          const mbtiStr = parts[2].toLowerCase()
          if (mbtiStr.includes('ÎÇ¥Ìñ•') || mbtiStr.includes('introvert') || mbtiStr.includes('i')) {
            mbti = 'introvert'
          }
        }
      } else if (trimmedLine.includes(' ')) {
        // Í≥µÎ∞± Íµ¨Î∂Ñ: "Ïù¥Î¶Ñ ÏÑ±Î≥Ñ MBTI"
        const parts = trimmedLine.split(/\s+/)
        name = parts[0] || ''
        
        if (parts[1]) {
          const genderStr = parts[1].toLowerCase()
          if (genderStr.includes('Ïó¨') || genderStr.includes('female') || genderStr.includes('f')) {
            gender = 'female'
          }
        }
        
        if (parts[2]) {
          const mbtiStr = parts[2].toLowerCase()
          if (mbtiStr.includes('introvert') || mbtiStr.includes('i')) {
            mbti = 'introvert'
          }
        }
      } else {
        // Ïù¥Î¶ÑÎßå: Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
        name = trimmedLine
      }

      if (name) {
        newParticipants.push({
          id: `${Date.now()}-${index}`,
          name,
          gender,
          mbti,
          meetingsByRound: {},
          allMetPeople: [],
          groupHistory: []
        })
      }
    })

    if (newParticipants.length > 0) {
      const updatedParticipants = [...participants, ...newParticipants]
      
      // Ï¶âÏãú SupabaseÏóê Ï†ÄÏû• (Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± Ï†ÑÏóê)
      const { saveParticipants } = await import('@/utils/database')
      await saveParticipants(updatedParticipants)
      
      // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setParticipants(updatedParticipants)
      setBulkText('')
      setShowBulkInput(false)
      
      // Î≤åÌÅ¨ Ï∂îÍ∞Ä Ïãú Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± (Supabase Ï†ÄÏû• ÌõÑ)
      try {
        await createSnapshot('bulk_add', `Î≤åÌÅ¨ Ï∂îÍ∞Ä: ${newParticipants.length}Î™Ö`)
        console.log(`‚úÖ Î≤åÌÅ¨ Ï∂îÍ∞Ä Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± ÏôÑÎ£å: ${newParticipants.length}Î™Ö`)
        
        // DB Ï†ÄÏû• ÏãúÎèÑ
        try {
          const { saveParticipants } = await import('@/utils/database')
          await saveParticipants(updatedParticipants)
          console.log('‚úÖ Î≤åÌÅ¨ Ï∂îÍ∞Ä DB Ï†ÄÏû• ÏÑ±Í≥µ')
        } catch (error) {
          console.warn('‚ö†Ô∏è Î≤åÌÅ¨ Ï∂îÍ∞Ä DB Ï†ÄÏû• Ïã§Ìå® (Î°úÏª¨ÏùÄ Ï†ïÏÉÅ):', error)
        }
      } catch (error) {
        console.error('‚ùå Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ± Ïã§Ìå®:', error)
      }
    }
  }

  // Î∞±ÏóÖ Í¥ÄÎ†® Ìï®ÏàòÎì§
  const handleExportData = async () => {
    try {
      const jsonData = await exportToJSON()
      const blob = new Blob([jsonData], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `socializing-data-${new Date().toISOString().split('T')[0]}.json`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      
      alert('Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Ï°åÏäµÎãàÎã§.')
    } catch (error) {
      console.error('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®:', error)
      alert('Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    }
  }

  const handleImportData = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    try {
      const fileContent = await file.text()
      const result = await importFromJSON(fileContent)
      if (!result.success) {
        throw new Error(result.message)
      }
      // Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò® ÌõÑ Í∏∞Ï°¥ Í≤∞Í≥º ÌôïÏù∏
      try {
        const { getGroupingResult } = await import('@/utils/database')
        const groupingResult = await getGroupingResult()
        setHasExistingResult(!!groupingResult)
      } catch (error) {
        console.error('Í∏∞Ï°¥ Í≤∞Í≥º ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error)
      }
      alert('Îç∞Ïù¥ÌÑ∞Î•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Í∞ÄÏ†∏ÏôîÏäµÎãàÎã§!')
      window.location.reload() // ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú ÏÉÅÌÉú Î∞òÏòÅ
    } catch (error) {
      alert('Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: ' + (error as Error).message)
    }
    
    // ÌååÏùº input Ï¥àÍ∏∞Ìôî
    event.target.value = ''
  }

  const handleRestoreSnapshot = async (snapshotId: number) => {
    if (confirm('Ïù¥ ÏãúÏ†êÏúºÎ°ú Î≥µÏõêÌïòÏãúÍ≤†ÏäµÎãàÍπå? ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞Îäî Î∞±ÏóÖÎê©ÎãàÎã§.')) {
      try {
        console.log('üîÑ Ïä§ÎÉÖÏÉ∑ Î≥µÏõê ÏãúÏûë, ID:', snapshotId)
        const success = await restoreSnapshot(snapshotId)
        
        if (success) {
          console.log('‚úÖ Ïä§ÎÉÖÏÉ∑ Î≥µÏõê ÏÑ±Í≥µ!')
          
          // Î≥µÏõê ÌõÑ Í∏∞Ï°¥ Í≤∞Í≥º ÌôïÏù∏
          try {
            const { getGroupingResult } = await import('@/utils/database')
            const groupingResult = await getGroupingResult()
            setHasExistingResult(!!groupingResult)
          } catch (error) {
            console.error('Î≥µÏõê ÌõÑ Í≤∞Í≥º ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error)
          }
          
          alert('‚úÖ Î≥µÏõêÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!')
          window.location.reload()
        } else {
          console.error('‚ùå Ïä§ÎÉÖÏÉ∑ Î≥µÏõê Ïã§Ìå®')
          alert('‚ùå Î≥µÏõê Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÏΩòÏÜîÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.')
        }
      } catch (error) {
        console.error('‚ùå Ïä§ÎÉÖÏÉ∑ Î≥µÏõê Ï§ë ÏòàÏô∏:', error)
        alert('‚ùå Î≥µÏõê Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + (error as Error).message)
      }
    }
  }

  const refreshSnapshots = async () => {
    if (typeof window !== 'undefined') {
      try {
        const allSnapshots = await getSnapshots()
        setSnapshots(allSnapshots)
      } catch (error) {
        console.warn('Ïä§ÎÉÖÏÉ∑ Ï°∞Ìöå Ïã§Ìå®:', error)
        setSnapshots([])
      }
    }
  }

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Ïä§ÎÉÖÏÉ∑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    refreshSnapshots()
  }, [participants, currentRound])

  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏÇ¨Ïù¥ÎìúÏóêÏÑúÎßå Ïä§ÎÉÖÏÉ∑ Î°úÎìú
  useEffect(() => {
    if (typeof window !== 'undefined') {
      refreshSnapshots()
    }
  }, [])



  // ÏÉàÎ°úÏö¥ Î™®ÏûÑ ÏãúÏûë Ìï®Ïàò
  const handleNewMeeting = async () => {
    const confirmMessage = `üéâ ÏÉàÎ°úÏö¥ Î™®ÏûÑÏùÑ ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?

Îã§Ïùå Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎê©ÎãàÎã§:
‚Ä¢ Î™®Îì† Ï∞∏Í∞ÄÏûê Ï†ïÎ≥¥
‚Ä¢ Í∑∏Î£π ÌûàÏä§ÌÜ†Î¶¨
‚Ä¢ ÎßåÎÇú ÏÇ¨Îûå Í∏∞Î°ù
‚Ä¢ ÌòÑÏû¨ ÎùºÏö¥Îìú Ï†ïÎ≥¥

Îã§Ïùå Îç∞Ïù¥ÌÑ∞Îäî Ïú†ÏßÄÎê©ÎãàÎã§:
‚Ä¢ Í∑∏Î£π ÏÑ§Ï†ï (Í∑∏Î£π Ïàò, ÌÅ¨Í∏∞, ÏÑ±ÎπÑ ÏÑ§Ï†ï)
‚Ä¢ Î∞±ÏóÖ Ïä§ÎÉÖÏÉ∑`

    if (confirm(confirmMessage)) {
      try {
        // SupabaseÏóêÏÑú ÌòÑÏû¨ Î™®ÏûÑÏùò Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        console.log('Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî: ÌòÑÏû¨ Î™®ÏûÑ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë...')
        const { clearCurrentMeetingData } = await import('@/utils/database')
        const cleared = await clearCurrentMeetingData()
        
        if (!cleared) {
          throw new Error('Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ïã§Ìå®')
        }
        
        console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å, ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Ï§ë...')
        
        // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî (Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÌôïÏù∏ ÌõÑÏóêÎßå Ïã§Ìñâ) - Í∑∏Î£π ÏÑ§Ï†ïÏùÄ Ïú†ÏßÄ
        setParticipants([])
        setCurrentRound(1)
        setName('')
        setGender('male')
        setMbti('extrovert')
        setBulkText('')
        setShowBulkInput(false)
        setShowBackupSection(false)
        setHasExistingResult(false)
        setIsInitialLoad(true)
        setGroupSettingsLoaded(false)
        
        // localStorageÏóêÏÑú Ï∞∏Í∞ÄÏûê Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞Îßå Ï¥àÍ∏∞Ìôî (Í∑∏Î£π ÏÑ§Ï†ïÏùÄ Ïú†ÏßÄ)
        if (typeof window !== 'undefined') {
          localStorage.removeItem('seatAssigner_participants')
          localStorage.removeItem('seatAssigner_groupingResult')
          localStorage.removeItem('seatAssigner_currentRound')
          localStorage.removeItem('seatAssigner_exitedParticipants')
          // seatAssigner_groupSettingsÎäî Ïú†ÏßÄ
        }
        
        // Ï¥àÍ∏∞Ìôî ÏôÑÎ£å ÌõÑ Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±
        setTimeout(async () => {
          setIsInitialLoad(false)
          setGroupSettingsLoaded(true)
          // Î∞±ÏßÄ ÏÉÅÌÉú Ïä§ÎÉÖÏÉ∑ ÏÉùÏÑ±
          await createSnapshot('meeting_start', 'ÏÉàÎ°úÏö¥ Î™®ÏûÑ ÏãúÏûë - Ï¥àÍ∏∞ÌôîÎêú ÏÉÅÌÉú')
          console.log('üéØ ÏÉàÎ°úÏö¥ Î™®ÏûÑ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å')
        }, 200)
        
        alert('‚úÖ ÏÉàÎ°úÏö¥ Î™®ÏûÑÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!')
      } catch (error) {
        console.error('Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò Î∞úÏÉù:', error)
        alert('‚ùå Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ® Ìï¥Ï£ºÏÑ∏Ïöî.')
      }
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Ìó§Îçî ÏÑπÏÖò - Ï†úÎ™©Í≥º Ï¥àÍ∏∞Ìôî Î≤ÑÌäº */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 flex items-center space-x-3">
                <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                <span>{currentMeeting ? currentMeeting.name : 'Î™®ÏûÑ ÏûêÎ¶¨ Î∞∞Ïπò ÌîÑÎ°úÍ∑∏Îû®'}</span>
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              {participants.length > 0 && (
                <div className="text-right">
                  <div className="text-sm text-gray-600">ÌòÑÏû¨ Ï∞∏Í∞ÄÏûê</div>
                  <div className="text-2xl font-bold text-blue-600">{participants.length}Î™Ö</div>
                </div>
              )}
              
              <button
                onClick={handleNewMeeting}
                className="bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white font-medium py-3 px-6 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1"
                title="ÏÉàÎ°úÏö¥ Î™®ÏûÑÏùÑ ÏãúÏûëÌï©ÎãàÎã§ (Î∞±ÏóÖÏùÄ Ïú†ÏßÄÎê©ÎãàÎã§)"
              >
                <div className="flex items-center space-x-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  <span>ÏÉàÎ°úÏö¥ Î™®ÏûÑ ÏãúÏûë</span>
                </div>
              </button>
            </div>
          </div>
          
          {/* ÏïàÎÇ¥ Î¨∏Íµ¨ */}
          {participants.length === 0 && (
            <div className="mt-4 p-4 bg-blue-50 rounded-lg">
              <div className="flex items-center space-x-2">
                <svg className="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span className="text-blue-700 font-medium">ÏÉàÎ°úÏö¥ Î™®ÏûÑÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî!</span>
              </div>
              <p className="text-blue-600 text-sm mt-1">
                Ï∞∏Í∞ÄÏûêÎ•º Ï∂îÍ∞ÄÌïòÍ≥† Í∑∏Î£πÏùÑ Î∞∞ÏπòÌïòÏó¨ Ï¶êÍ±∞Ïö¥ Î™®ÏûÑÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.
              </p>
            </div>
          )}
        </div>
        
        <div className="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Ï∞∏ÏÑùÏûê Ï∂îÍ∞Ä</h2>
          
          {/* Í∑∏Î£π ÏÑ§Ï†ï Î™®Îìú ÏÑ†ÌÉù - Í∞úÏÑ†Îêú UI */}
          <div className="mb-6">
            <label className="block text-lg font-semibold text-gray-800 mb-4 flex items-center">
              <span className="text-purple-500 mr-2">‚öôÔ∏è</span>
              Í∑∏Î£π ÏÑ§Ï†ï Î∞©Ïãù
            </label>
            
            {/* Ïπ¥Îìú ÌòïÌÉúÏùò ÏÑ†ÌÉù Î≤ÑÌäº */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              {/* ÏûêÎèô Î™®Îìú Ïπ¥Îìú */}
              <div
                onClick={() => setGroupingMode('auto')}
                className={`cursor-pointer rounded-xl border-2 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg ${
                  groupingMode === 'auto'
                    ? 'border-blue-500 bg-gradient-to-br from-blue-50 to-indigo-100 shadow-lg'
                    : 'border-gray-200 bg-white hover:border-blue-300'
                }`}
              >
                <div className="p-6">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                        groupingMode === 'auto' 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-gray-200 text-gray-600'
                      }`}>
                        ü§ñ
                      </div>
                      <div>
                        <h3 className="font-bold text-lg text-gray-800">ÏûêÎèô Î™®Îìú</h3>
                        <p className="text-sm text-gray-600">ÎèôÏùºÌïú ÌÅ¨Í∏∞Î°ú ÏûêÎèô Î∞∞Ïπò</p>
                      </div>
                    </div>
                    <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                      groupingMode === 'auto'
                        ? 'border-blue-500 bg-blue-500'
                        : 'border-gray-300'
                    }`}>
                      {groupingMode === 'auto' && (
                        <div className="w-3 h-3 bg-white rounded-full"></div>
                      )}
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center text-sm text-gray-600">
                      <span className="mr-2">‚úÖ</span>
                      <span>Í∞ÑÌé∏Ìïú ÏÑ§Ï†ï</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <span className="mr-2">‚ö°</span>
                      <span>Îπ†Î•∏ Î∞∞Ïπò</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <span className="mr-2">üéØ</span>
                      <span>Í∑†Îì±Ìïú Í∑∏Î£π ÌÅ¨Í∏∞</span>
                    </div>
                  </div>
                  
                  {groupingMode === 'auto' && (
                    <div className="mt-4 p-3 bg-white bg-opacity-60 rounded-lg">
                      <div className="text-xs text-blue-700 font-medium">ÌòÑÏû¨ ÏÑ§Ï†ï</div>
                      <div className="text-sm text-blue-800">
                        Í∑∏Î£πÎãπ {groupSize}Î™Ö ¬∑ ÏòàÏÉÅ {participants.length > 0 ? Math.ceil(participants.length / groupSize) : 0}Í∞ú Í∑∏Î£π
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* ÏàòÎèô Î™®Îìú Ïπ¥Îìú */}
              <div
                onClick={() => setGroupingMode('manual')}
                className={`cursor-pointer rounded-xl border-2 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg ${
                  groupingMode === 'manual'
                    ? 'border-purple-500 bg-gradient-to-br from-purple-50 to-pink-100 shadow-lg'
                    : 'border-gray-200 bg-white hover:border-purple-300'
                }`}
              >
                <div className="p-6">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                        groupingMode === 'manual' 
                          ? 'bg-purple-500 text-white' 
                          : 'bg-gray-200 text-gray-600'
                      }`}>
                        üé®
                      </div>
                      <div>
                        <h3 className="font-bold text-lg text-gray-800">ÏàòÎèô Î™®Îìú</h3>
                        <p className="text-sm text-gray-600">Í∞úÎ≥Ñ Í∑∏Î£π ÌÅ¨Í∏∞ ÏÑ§Ï†ï</p>
                      </div>
                    </div>
                    <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                      groupingMode === 'manual'
                        ? 'border-purple-500 bg-purple-500'
                        : 'border-gray-300'
                    }`}>
                      {groupingMode === 'manual' && (
                        <div className="w-3 h-3 bg-white rounded-full"></div>
                      )}
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center text-sm text-gray-600">
                      <span className="mr-2">üéõÔ∏è</span>
                      <span>ÏÑ∏Î∞ÄÌïú Ï°∞Ï†ï</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <span className="mr-2">üéØ</span>
                      <span>ÎßûÏ∂§Ìòï Í∑∏Î£π</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <span className="mr-2">üíé</span>
                      <span>Ïú†Ïó∞Ìïú ÏÑ§Ï†ï</span>
                    </div>
                  </div>
                  
                  {groupingMode === 'manual' && (
                    <div className="mt-4 p-3 bg-white bg-opacity-60 rounded-lg">
                      <div className="text-xs text-purple-700 font-medium">ÌòÑÏû¨ ÏÑ§Ï†ï</div>
                      <div className="text-sm text-purple-800">
                        {numGroups}Í∞ú Í∑∏Î£π ¬∑ Ï¥ù {getTotalCustomSize()}Î™Ö ÏòàÏÉÅ
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* ÏÑ∏Î∂Ä ÏÑ§Ï†ï ÏÑπÏÖò */}
            <div className={`p-6 rounded-xl border-2 transition-all duration-300 ${
              groupingMode === 'auto' 
                ? 'border-blue-200 bg-gradient-to-br from-blue-50 to-blue-100' 
                : 'border-purple-200 bg-gradient-to-br from-purple-50 to-purple-100'
            }`}>
              {groupingMode === 'auto' ? (
                <div className="space-y-4">
                  <h4 className="text-lg font-semibold text-gray-800 flex items-center mb-4">
                    <span className="text-blue-500 mr-2">ü§ñ</span>
                    ÏûêÎèô Î™®Îìú ÏÑ§Ï†ï
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <label className="block text-sm font-semibold text-gray-700">Í∑∏Î£π ÌÅ¨Í∏∞ ÏÑ†ÌÉù</label>
                      <div className="grid grid-cols-2 gap-2">
                        {[3, 4, 5, 6].map((size) => (
                          <button
                            key={size}
                            onClick={() => setGroupSize(size)}
                            className={`p-3 rounded-lg border-2 transition-all duration-200 text-center font-medium ${
                              groupSize === size
                                ? 'border-blue-500 bg-blue-500 text-white shadow-md'
                                : 'border-gray-300 bg-white text-gray-700 hover:border-blue-300 hover:bg-blue-50'
                            }`}
                          >
                            <div className="text-lg">{size}Î™Ö</div>
                            <div className="text-xs opacity-75">Í∑∏Î£πÎãπ</div>
                          </button>
                        ))}
                      </div>
                    </div>
                    
                    <div className="bg-white bg-opacity-70 p-4 rounded-lg">
                      <h5 className="font-medium text-gray-700 mb-2 flex items-center">
                        <span className="mr-2">üìä</span>
                        ÏòàÏÉÅ Í≤∞Í≥º
                      </h5>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">ÌòÑÏû¨ Ï∞∏Í∞ÄÏûê:</span>
                          <span className="font-medium text-blue-700">{participants.length}Î™Ö</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">ÏòàÏÉÅ Í∑∏Î£π Ïàò:</span>
                          <span className="font-medium text-blue-700">
                            {participants.length > 0 ? Math.ceil(participants.length / groupSize) : 0}Í∞ú
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Í∑∏Î£πÎãπ Ïù∏Ïõê:</span>
                          <span className="font-medium text-blue-700">{groupSize}Î™Ö</span>
                        </div>
                        {participants.length % groupSize !== 0 && participants.length > 0 && (
                          <div className="mt-2 p-2 bg-orange-100 rounded text-xs text-orange-700">
                            ‚ö†Ô∏è ÎßàÏßÄÎßâ Í∑∏Î£π: {participants.length % groupSize}Î™Ö
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <h4 className="text-lg font-semibold text-gray-800 flex items-center mb-4">
                    <span className="text-purple-500 mr-2">üé®</span>
                    ÏàòÎèô Î™®Îìú ÏÑ§Ï†ï
                  </h4>
                  
                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Í∑∏Î£π Ïàò ÏÑ†ÌÉù */}
                    <div className="space-y-3">
                      <label className="block text-sm font-semibold text-gray-700">Í∑∏Î£π Ïàò ÏÑ†ÌÉù</label>
                      <div className="grid grid-cols-2 gap-2">
                        {[2, 3, 4, 5, 6, 7, 8].map((num) => (
                          <button
                            key={num}
                            onClick={() => handleNumGroupsChange(num)}
                            className={`p-2 rounded-lg border-2 transition-all duration-200 text-center font-medium ${
                              numGroups === num
                                ? 'border-purple-500 bg-purple-500 text-white shadow-md'
                                : 'border-gray-300 bg-white text-gray-700 hover:border-purple-300 hover:bg-purple-50'
                            }`}
                          >
                            <div className="text-sm">{num}Í∞ú</div>
                          </button>
                        ))}
                      </div>
                    </div>
                    
                    {/* Í∑∏Î£πÎ≥Ñ Ïù∏Ïõê ÏÑ§Ï†ï */}
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <label className="block text-sm font-semibold text-gray-700">Í∞Å Í∑∏Î£π ÏÑ§Ï†ï</label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            id="enableGenderRatio"
                            checked={enableGenderRatio}
                            onChange={(e) => setEnableGenderRatio(e.target.checked)}
                            className="w-4 h-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
                          />
                          <label htmlFor="enableGenderRatio" className="text-xs text-gray-600">ÏÑ±ÎπÑ Í∞úÎ≥Ñ ÏÑ§Ï†ï</label>
                        </div>
                      </div>
                      <div className="space-y-2 max-h-48 overflow-y-auto">
                        {customGroupSizes.map((size, index) => (
                          <div key={index} className="bg-white bg-opacity-70 p-3 rounded-lg border">
                            <div className="flex items-center space-x-3 mb-2">
                              <div className="flex items-center justify-center min-w-[2rem] w-8 h-8 bg-purple-100 text-purple-600 rounded-full text-sm font-medium flex-shrink-0">
                                {index + 1}
                              </div>
                              <span className="text-sm text-gray-600 min-w-[50px]">Í∑∏Î£π {index + 1}:</span>
                              <div className="flex items-center space-x-2">
                                <button
                                  onClick={() => handleGroupSizeChange(index, Math.max(2, size - 1))}
                                  className="w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs hover:bg-purple-600"
                                >
                                  -
                                </button>
                                <span className="w-8 text-center font-medium">{size}</span>
                                <button
                                  onClick={() => handleGroupSizeChange(index, Math.min(20, size + 1))}
                                  className="w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs hover:bg-purple-600"
                                >
                                  +
                                </button>
                                <span className="text-sm text-gray-500">Î™Ö</span>
                              </div>
                            </div>
                            
                            {enableGenderRatio && (
                              <div className="mt-2 p-3 bg-gradient-to-r from-blue-50 to-pink-50 rounded-lg border border-purple-200">
                                <div className="text-xs font-medium text-gray-700 mb-3">ÏÑ±ÎπÑ ÏÑ§Ï†ï</div>
                                <div className="space-y-3">
                                  {/* ÎÇ®ÏÑ± ÏÑ§Ï†ï */}
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center space-x-2">
                                      <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                                      <span className="text-sm text-blue-700 font-medium">ÎÇ®ÏÑ±</span>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                      <button
                                        onClick={() => handleGroupMaleCountChange(index, Math.max(0, customGroupGenders[index]?.maleCount - 1))}
                                        className="w-7 h-7 bg-blue-500 text-white rounded-md flex items-center justify-center text-sm hover:bg-blue-600 transition-colors"
                                      >
                                        ‚àí
                                      </button>
                                      <div className="w-8 text-center">
                                        <span className="text-sm font-bold text-blue-700">{customGroupGenders[index]?.maleCount || 0}</span>
                                      </div>
                                      <button
                                        onClick={() => handleGroupMaleCountChange(index, Math.min(size, customGroupGenders[index]?.maleCount + 1))}
                                        className="w-7 h-7 bg-blue-500 text-white rounded-md flex items-center justify-center text-sm hover:bg-blue-600 transition-colors"
                                      >
                                        +
                                      </button>
                                    </div>
                                  </div>
                                  
                                  {/* Ïó¨ÏÑ± ÏÑ§Ï†ï */}
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center space-x-2">
                                      <div className="w-3 h-3 bg-pink-500 rounded-full"></div>
                                      <span className="text-sm text-pink-700 font-medium">Ïó¨ÏÑ±</span>
                                    </div>
                                    <div className="flex items-center space-x-2">
                                      <button
                                        onClick={() => handleGroupFemaleCountChange(index, Math.max(0, customGroupGenders[index]?.femaleCount - 1))}
                                        className="w-7 h-7 bg-pink-500 text-white rounded-md flex items-center justify-center text-sm hover:bg-pink-600 transition-colors"
                                      >
                                        ‚àí
                                      </button>
                                      <div className="w-8 text-center">
                                        <span className="text-sm font-bold text-pink-700">{customGroupGenders[index]?.femaleCount || 0}</span>
                                      </div>
                                      <button
                                        onClick={() => handleGroupFemaleCountChange(index, Math.min(size, customGroupGenders[index]?.femaleCount + 1))}
                                        className="w-7 h-7 bg-pink-500 text-white rounded-md flex items-center justify-center text-sm hover:bg-pink-600 transition-colors"
                                      >
                                        +
                                      </button>
                                    </div>
                                  </div>
                                  
                                  {/* Ìï©Í≥Ñ ÌëúÏãú */}
                                  <div className="pt-2 border-t border-gray-200">
                                    <div className="flex items-center justify-between text-xs">
                                      <span className="text-gray-600">Ìï©Í≥Ñ</span>
                                      <div className="flex items-center space-x-1">
                                        <span className="font-medium text-gray-800">
                                          {(customGroupGenders[index]?.maleCount || 0) + (customGroupGenders[index]?.femaleCount || 0)}Î™Ö
                                        </span>
                                        {((customGroupGenders[index]?.maleCount || 0) + (customGroupGenders[index]?.femaleCount || 0)) !== size && (
                                          <span className="text-red-600 font-medium">
                                            ‚ö†Ô∏è Î∂àÏùºÏπò
                                          </span>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    {/* Í≤∞Í≥º ÏöîÏïΩ */}
                    <div className="bg-white bg-opacity-70 p-4 rounded-lg">
                      <h5 className="font-medium text-gray-700 mb-3 flex items-center">
                        <span className="mr-2">üìä</span>
                        ÏÑ§Ï†ï ÏöîÏïΩ
                      </h5>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">ÌòÑÏû¨ Ï∞∏Í∞ÄÏûê:</span>
                          <span className="font-medium text-purple-700">{participants.length}Î™Ö</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">ÏÑ§Ï†ï Í∑∏Î£π Ïàò:</span>
                          <span className="font-medium text-purple-700">{numGroups}Í∞ú</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Ï¥ù ÏòàÏÉÅ Ïù∏Ïõê:</span>
                          <span className="font-medium text-purple-700">{getTotalCustomSize()}Î™Ö</span>
                        </div>
                        
                        {/* ÏÉÅÌÉú ÌëúÏãú */}
                        <div className="mt-3 pt-2 border-t border-gray-200">
                          {getTotalCustomSize() === participants.length ? (
                            <div className="flex items-center text-green-600 text-xs">
                              <span className="mr-1">‚úÖ</span>
                              <span>ÏôÑÎ≤ΩÌïú Î∞∞Ïπò!</span>
                            </div>
                          ) : getTotalCustomSize() < participants.length ? (
                            <div className="flex items-center text-red-600 text-xs">
                              <span className="mr-1">‚ö†Ô∏è</span>
                              <span>{participants.length - getTotalCustomSize()}Î™Ö Ï¥àÍ≥º</span>
                            </div>
                          ) : (
                            <div className="flex items-center text-orange-600 text-xs">
                              <span className="mr-1">üí°</span>
                              <span>{getTotalCustomSize() - participants.length}Î™Ö Ïó¨Ïú†</span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* ÌòÑÏû¨ ÎùºÏö¥Îìú ÌëúÏãú - Í∞úÏÑ†Îêú UI */}
          <div className="mb-6">
            <div className="relative bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl p-6 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="bg-white bg-opacity-20 rounded-full p-3 animate-pulse">
                    <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    {hasExistingResult ? (
                      <>
                        <h3 className="text-lg font-medium text-green-200">Î∞∞Ïπò ÏôÑÎ£å</h3>
                        <div className="text-3xl font-bold bg-gradient-to-r from-green-300 to-emerald-300 bg-clip-text text-transparent">
                          {currentRound - 1}ÎùºÏö¥Îìú Î∞∞Ïπò ÏôÑÎ£å
                        </div>
                      </>
                    ) : (
                      <>
                        <h3 className="text-lg font-medium text-blue-100">Î∞∞Ïπò Ï§ÄÎπÑ</h3>
                        <div className="text-3xl font-bold bg-gradient-to-r from-yellow-300 to-orange-300 bg-clip-text text-transparent">
                          {currentRound}ÎùºÏö¥Îìú Î∞∞Ïπò Ï†Ñ
                        </div>
                      </>
                    )}
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-blue-100 text-sm">Ï∞∏Í∞ÄÏûê</div>
                  <div className="text-2xl font-bold">{participants.length}Î™Ö</div>
                  {participants.length >= 2 && (
                    <div className="inline-flex items-center mt-1 px-2 py-1 bg-green-500 bg-opacity-20 rounded-full">
                      <div className="w-2 h-2 bg-green-400 rounded-full mr-1 animate-ping"></div>
                      <span className="text-xs text-green-200">Î∞∞Ïπò Í∞ÄÎä•</span>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Ï∞∏Í∞ÄÏûê ÏàòÏóê Îî∞Î•∏ ÏòàÏÉÅ Í∑∏Î£π Ï†ïÎ≥¥ */}
              {participants.length > 0 && (
                <div className="mt-4 pt-4 border-t border-white border-opacity-20">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-blue-100">
                      {groupingMode === 'auto' 
                        ? `ÏòàÏÉÅ Í∑∏Î£π: ${Math.ceil(participants.length / groupSize)}Í∞ú (${groupSize}Î™ÖÏî©)`
                        : `ÏÑ§Ï†ï Í∑∏Î£π: ${numGroups}Í∞ú (Ï¥ù ${getTotalCustomSize()}Î™Ö)`
                      }
                    </span>
                    {groupingMode === 'manual' && getTotalCustomSize() !== participants.length && (
                      <span className={`font-medium px-2 py-1 rounded-full text-xs ${
                        getTotalCustomSize() < participants.length 
                          ? 'bg-red-500 bg-opacity-20 text-red-200' 
                          : 'bg-yellow-500 bg-opacity-20 text-yellow-200'
                      }`}>
                        {getTotalCustomSize() < participants.length 
                          ? `${participants.length - getTotalCustomSize()}Î™Ö Ï¥àÍ≥º` 
                          : `${getTotalCustomSize() - participants.length}Î™Ö Ïó¨Ïú†`
                        }
                      </span>
                    )}
                  </div>
                </div>
              )}
              
              {/* Ïû•ÏãùÏ†Å ÏöîÏÜå - Í∞úÏÑ†Îêú Ïï†ÎãàÎ©îÏù¥ÏÖò */}
              <div className="absolute top-0 right-0 -mr-2 -mt-2 w-16 h-16 bg-white bg-opacity-10 rounded-full animate-bounce"></div>
              <div className="absolute bottom-0 left-0 -ml-2 -mb-2 w-12 h-12 bg-white bg-opacity-10 rounded-full animate-pulse"></div>
              <div className="absolute top-1/2 right-4 w-3 h-3 bg-yellow-300 rounded-full animate-ping opacity-75"></div>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <input
              type="text"
              placeholder="Ïù¥Î¶Ñ"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            
            <select
              value={gender}
              onChange={(e) => setGender(e.target.value as 'male' | 'female')}
              className="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="male">ÎÇ®ÏÑ±</option>
              <option value="female">Ïó¨ÏÑ±</option>
            </select>
            
            <select
              value={mbti}
              onChange={(e) => setMbti(e.target.value as 'extrovert' | 'introvert')}
              className="border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="extrovert">Ïô∏Ìñ•Ìòï</option>
              <option value="introvert">ÎÇ¥Ìñ•Ìòï</option>
            </select>
            
            <button
              onClick={addParticipant}
              className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md"
            >
              Ï∂îÍ∞Ä
            </button>
          </div>
          
          <div className="mt-4 pt-4 border-t border-gray-200">
            <div className="flex justify-between items-center mb-3">
              <h3 className="text-lg font-medium">Î≤åÌÅ¨ Ï∂îÍ∞Ä</h3>
              <button
                onClick={() => setShowBulkInput(!showBulkInput)}
                className="text-blue-500 hover:text-blue-700 text-sm"
              >
                {showBulkInput ? 'Ïà®Í∏∞Í∏∞' : 'Ïó¨Îü¨ Î™Ö ÌïúÎ≤àÏóê Ï∂îÍ∞Ä'}
              </button>
            </div>
            
            {showBulkInput && (
              <div className="space-y-3">
                <div className="text-sm text-gray-600">
                  <p className="mb-2">ÏßÄÏõêÌïòÎäî ÌòïÏãù:</p>
                  <ul className="list-disc list-inside space-y-1 text-xs">
                    <li>Ïù¥Î¶ÑÎßå: ÍπÄÏ≤†Ïàò (Í∏∞Î≥∏Í∞í: ÎÇ®ÏÑ±, Ïô∏Ìñ•Ìòï)</li>
                    <li>Í≥µÎ∞± Íµ¨Î∂Ñ: ÍπÄÏ≤†Ïàò ÎÇ® Ïô∏Ìñ•</li>
                    <li>ÏâºÌëú Íµ¨Î∂Ñ: ÍπÄÏ≤†Ïàò,ÎÇ®,Ïô∏Ìñ•</li>
                    <li>ÏÑ±Î≥Ñ: ÎÇ®/Ïó¨ ÎòêÎäî male/female ÎòêÎäî m/f</li>
                    <li>MBTI: Ïô∏Ìñ•/ÎÇ¥Ìñ• ÎòêÎäî extrovert/introvert ÎòêÎäî e/i</li>
                  </ul>
                  <div className="mt-3 p-2 bg-gray-100 rounded text-xs">
                    <strong>ÏòàÏãú:</strong><br/>
                    ÍπÄÏ≤†Ïàò<br/>
                    Ïù¥ÏòÅÌù¨,Ïó¨,ÎÇ¥Ìñ•<br/>
                    Î∞ïÎØºÏàò ÎÇ® Ïô∏Ìñ•
                  </div>
                </div>
                <textarea
                  value={bulkText}
                  onChange={(e) => setBulkText(e.target.value)}
                  placeholder="Ïó¨Í∏∞Ïóê Ï∞∏Í∞ÄÏûê Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî (Ìïú Ï§ÑÏóê Ìïú Î™ÖÏî©)"
                  className="w-full h-32 border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <div className="flex gap-2">
                  <button
                    onClick={processBulkInput}
                    className="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-md text-sm"
                  >
                    Î≤åÌÅ¨ Ï∂îÍ∞Ä
                  </button>
                  <button
                    onClick={() => {
                      setBulkText('')
                      setShowBulkInput(false)
                    }}
                    className="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-md text-sm"
                  >
                    Ï∑®ÏÜå
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4">
            Ï∞∏ÏÑùÏûê Î™©Î°ù ({participants.length}Î™Ö)
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {participants.sort((a, b) => a.name.localeCompare(b.name, 'ko')).map((participant) => (
              <div
                key={participant.id}
                className="flex items-center justify-between p-3 border border-gray-200 rounded-md"
              >
                <div>
                  <span className="font-medium">{participant.name}</span>
                  <div className="text-sm text-gray-600">
                    {participant.gender === 'male' ? 'ÎÇ®ÏÑ±' : 'Ïó¨ÏÑ±'} ¬∑ {' '}
                    {participant.mbti === 'extrovert' ? 'Ïô∏Ìñ•Ìòï' : 'ÎÇ¥Ìñ•Ìòï'}
                  </div>
                  {participant.allMetPeople && participant.allMetPeople.length > 0 && (
                    <div className="text-xs text-blue-600">
                      ÎßåÎÇú ÏÇ¨Îûå: {participant.allMetPeople.length}Î™Ö
                    </div>
                  )}
                  {participant.groupHistory && participant.groupHistory.length > 0 && (
                    <div className="text-xs text-purple-600">
                      Í∑∏Î£π ÌûàÏä§ÌÜ†Î¶¨: {participant.groupHistory.slice(-3).join(', ')}
                    </div>
                  )}
                </div>
                <button
                  onClick={() => removeParticipant(participant.id)}
                  className="text-red-500 hover:text-red-700"
                >
                  ÏÇ≠Ï†ú
                </button>
              </div>
            ))}
          </div>
          
          {participants.length >= 2 && (
            <div className="mt-6 text-center">
              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                <button 
                  onClick={handleGrouping}
                  disabled={isLoading}
                  className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white font-medium py-3 px-6 rounded-md"
                >
                  {isLoading ? 'Î∞∞Ïπò Ï§ë...' : 'ÏÉàÎ°úÏö¥ Í∑∏Î£π Î∞∞ÏπòÌïòÍ∏∞'}
                </button>
                
                {isClient && hasExistingResult && (
                  <>
                    <button
                      onClick={regroupCurrentRound}
                      disabled={isLoading}
                      className="bg-orange-500 hover:bg-orange-600 disabled:bg-gray-400 text-white font-medium py-3 px-6 rounded-md"
                    >
                      {isLoading ? 'Ïû¨Î∞∞Ïπò Ï§ë...' : 'Ïù¥Î≤à Í∑∏Î£π Ïû¨Î∞∞ÏπòÌïòÍ∏∞'}
                    </button>
                    
                    <button
                      onClick={() => router.push('/result')}
                      className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-5 rounded-md flex items-center gap-2"
                    >
                      <span className="text-lg">üìä</span>
                      <span>Î∞∞Ïπò Í≤∞Í≥º ÌôïÏù∏ÌïòÍ∏∞</span>
                    </button>
                  </>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Î∞±ÏóÖ Î∞è Î≥µÏõê ÏÑπÏÖò */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ Î∞è Î≥µÏõê</h2>
            <button
              onClick={() => setShowBackupSection(!showBackupSection)}
              className="text-blue-500 hover:text-blue-700 text-sm"
            >
              {showBackupSection ? 'Ïà®Í∏∞Í∏∞' : 'Î∞±ÏóÖ Î©îÎâ¥ Ïó¥Í∏∞'}
            </button>
          </div>

          {showBackupSection && (
            <div className="space-y-6">
              {/* JSON ÎÇ¥Î≥¥ÎÇ¥Í∏∞/Í∞ÄÏ†∏Ïò§Í∏∞ */}
              <div className="border-b border-gray-200 pb-6">
                <h3 className="text-lg font-medium mb-3 flex items-center">
                  <span className="text-blue-500 mr-2">üíæ</span>
                  Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ / Í∞ÄÏ†∏Ïò§Í∏∞
                </h3>
                <div className="flex gap-4">
                  <button
                    onClick={handleExportData}
                    className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md"
                  >
                    Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (JSON)
                  </button>
                  <div className="relative">
                    <input
                      type="file"
                      accept=".json"
                      onChange={handleImportData}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    />
                    <button className="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-md">
                      Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (JSON)
                    </button>
                  </div>
                </div>
                <p className="text-sm text-gray-600 mt-2">
                  üí° Ï§ëÏöîÌïú Îç∞Ïù¥ÌÑ∞Îäî Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞ÌïòÏó¨ Î∞±ÏóÖÌïòÏÑ∏Ïöî.
                </p>
              </div>

              {/* Ïä§ÎÉÖÏÉ∑ Î≥µÏõê */}
              <div>
                <div className="flex justify-between items-center mb-3">
                  <h3 className="text-lg font-medium flex items-center">
                    <span className="text-orange-500 mr-2">üì∏</span>
                    ÏûêÎèô Ïä§ÎÉÖÏÉ∑ Î≥µÏõê
                  </h3>
                  <button
                    onClick={refreshSnapshots}
                    className="text-blue-500 hover:text-blue-700 text-sm"
                  >
                    ÏÉàÎ°úÍ≥†Ïπ®
                  </button>
                </div>
                
                {snapshots.length === 0 ? (
                  <p className="text-gray-500 text-sm">Ï†ÄÏû•Îêú Ïä§ÎÉÖÏÉ∑Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                ) : (
                  <div className="space-y-2 max-h-60 overflow-y-auto">
                    {snapshots.slice(-20).reverse().map((snapshot) => (
                      <div 
                        key={snapshot.id}
                        className="flex justify-between items-center p-3 border border-gray-200 rounded-md hover:bg-gray-50"
                      >
                        <div className="flex-1">
                          <div className="font-medium text-sm">{snapshot.description}</div>
                          <div className="text-xs text-gray-500">
                            {formatDateTime(snapshot.timestamp)}
                          </div>
                        </div>
                        <button
                          onClick={() => handleRestoreSnapshot(snapshot.id)}
                          className="bg-orange-500 hover:bg-orange-600 text-white text-xs py-1 px-3 rounded"
                        >
                          Î≥µÏõê
                        </button>
                      </div>
                    ))}
                  </div>
                )}
                <p className="text-sm text-gray-600 mt-3">
                  üí° Ï∞∏Í∞ÄÏûê Ï∂îÍ∞Ä/Ï†úÍ±∞, Í∑∏Î£π Î∞∞Ïπò, ÏúÑÏπò Î≥ÄÍ≤Ω Ïãú ÏûêÎèôÏúºÎ°ú Ïä§ÎÉÖÏÉ∑Ïù¥ ÏÉùÏÑ±Îê©ÎãàÎã§.
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}